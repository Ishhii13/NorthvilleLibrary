#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NorthvilleLibrary
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="NorthvilleLibrary")]
	public partial class LINQDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBook(Book instance);
    partial void UpdateBook(Book instance);
    partial void DeleteBook(Book instance);
    partial void InsertBorrow(Borrow instance);
    partial void UpdateBorrow(Borrow instance);
    partial void DeleteBorrow(Borrow instance);
    partial void InsertCourse(Course instance);
    partial void UpdateCourse(Course instance);
    partial void DeleteCourse(Course instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertStaff(Staff instance);
    partial void UpdateStaff(Staff instance);
    partial void DeleteStaff(Staff instance);
    partial void InsertStudent(Student instance);
    partial void UpdateStudent(Student instance);
    partial void DeleteStudent(Student instance);
    partial void InsertTransaction(Transaction instance);
    partial void UpdateTransaction(Transaction instance);
    partial void DeleteTransaction(Transaction instance);
    partial void InsertVisit(Visit instance);
    partial void UpdateVisit(Visit instance);
    partial void DeleteVisit(Visit instance);
    #endregion
		
		public LINQDataContext() : 
				base(global::NorthvilleLibrary.Properties.Settings.Default.NorthvilleLibraryConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public LINQDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LINQDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LINQDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LINQDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Book> Books
		{
			get
			{
				return this.GetTable<Book>();
			}
		}
		
		public System.Data.Linq.Table<Borrow> Borrows
		{
			get
			{
				return this.GetTable<Borrow>();
			}
		}
		
		public System.Data.Linq.Table<Course> Courses
		{
			get
			{
				return this.GetTable<Course>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Staff> Staffs
		{
			get
			{
				return this.GetTable<Staff>();
			}
		}
		
		public System.Data.Linq.Table<Student> Students
		{
			get
			{
				return this.GetTable<Student>();
			}
		}
		
		public System.Data.Linq.Table<Transaction> Transactions
		{
			get
			{
				return this.GetTable<Transaction>();
			}
		}
		
		public System.Data.Linq.Table<Visit> Visits
		{
			get
			{
				return this.GetTable<Visit>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.CountVisits")]
		public ISingleResult<CountVisitsResult> CountVisits([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Start_Date", DbType="Date")] System.Nullable<System.DateTime> start_Date, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="End_Date", DbType="Date")] System.Nullable<System.DateTime> end_Date)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), start_Date, end_Date);
			return ((ISingleResult<CountVisitsResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.MostBorrowedBooks")]
		public ISingleResult<MostBorrowedBooksResult> MostBorrowedBooks()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<MostBorrowedBooksResult>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Book")]
	public partial class Book : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Book_ID;
		
		private string _Book_Title;
		
		private string _Book_Author;
		
		private string _Book_ISBN;
		
		private System.DateTime _Book_Publication_Date;
		
		private string _Book_Genre;
		
		private int _Book_Copies;
		
		private EntitySet<Borrow> _Borrows;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBook_IDChanging(string value);
    partial void OnBook_IDChanged();
    partial void OnBook_TitleChanging(string value);
    partial void OnBook_TitleChanged();
    partial void OnBook_AuthorChanging(string value);
    partial void OnBook_AuthorChanged();
    partial void OnBook_ISBNChanging(string value);
    partial void OnBook_ISBNChanged();
    partial void OnBook_Publication_DateChanging(System.DateTime value);
    partial void OnBook_Publication_DateChanged();
    partial void OnBook_GenreChanging(string value);
    partial void OnBook_GenreChanged();
    partial void OnBook_CopiesChanging(int value);
    partial void OnBook_CopiesChanged();
    #endregion
		
		public Book()
		{
			this._Borrows = new EntitySet<Borrow>(new Action<Borrow>(this.attach_Borrows), new Action<Borrow>(this.detach_Borrows));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Book_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Book_ID
		{
			get
			{
				return this._Book_ID;
			}
			set
			{
				if ((this._Book_ID != value))
				{
					this.OnBook_IDChanging(value);
					this.SendPropertyChanging();
					this._Book_ID = value;
					this.SendPropertyChanged("Book_ID");
					this.OnBook_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Book_Title", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Book_Title
		{
			get
			{
				return this._Book_Title;
			}
			set
			{
				if ((this._Book_Title != value))
				{
					this.OnBook_TitleChanging(value);
					this.SendPropertyChanging();
					this._Book_Title = value;
					this.SendPropertyChanged("Book_Title");
					this.OnBook_TitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Book_Author", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Book_Author
		{
			get
			{
				return this._Book_Author;
			}
			set
			{
				if ((this._Book_Author != value))
				{
					this.OnBook_AuthorChanging(value);
					this.SendPropertyChanging();
					this._Book_Author = value;
					this.SendPropertyChanged("Book_Author");
					this.OnBook_AuthorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Book_ISBN", DbType="VarChar(50)")]
		public string Book_ISBN
		{
			get
			{
				return this._Book_ISBN;
			}
			set
			{
				if ((this._Book_ISBN != value))
				{
					this.OnBook_ISBNChanging(value);
					this.SendPropertyChanging();
					this._Book_ISBN = value;
					this.SendPropertyChanged("Book_ISBN");
					this.OnBook_ISBNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Book_Publication_Date", DbType="Date NOT NULL")]
		public System.DateTime Book_Publication_Date
		{
			get
			{
				return this._Book_Publication_Date;
			}
			set
			{
				if ((this._Book_Publication_Date != value))
				{
					this.OnBook_Publication_DateChanging(value);
					this.SendPropertyChanging();
					this._Book_Publication_Date = value;
					this.SendPropertyChanged("Book_Publication_Date");
					this.OnBook_Publication_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Book_Genre", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Book_Genre
		{
			get
			{
				return this._Book_Genre;
			}
			set
			{
				if ((this._Book_Genre != value))
				{
					this.OnBook_GenreChanging(value);
					this.SendPropertyChanging();
					this._Book_Genre = value;
					this.SendPropertyChanged("Book_Genre");
					this.OnBook_GenreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Book_Copies", DbType="Int NOT NULL")]
		public int Book_Copies
		{
			get
			{
				return this._Book_Copies;
			}
			set
			{
				if ((this._Book_Copies != value))
				{
					this.OnBook_CopiesChanging(value);
					this.SendPropertyChanging();
					this._Book_Copies = value;
					this.SendPropertyChanged("Book_Copies");
					this.OnBook_CopiesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Book_Borrow", Storage="_Borrows", ThisKey="Book_ID", OtherKey="Borrow_Book_ID")]
		public EntitySet<Borrow> Borrows
		{
			get
			{
				return this._Borrows;
			}
			set
			{
				this._Borrows.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Borrows(Borrow entity)
		{
			this.SendPropertyChanging();
			entity.Book = this;
		}
		
		private void detach_Borrows(Borrow entity)
		{
			this.SendPropertyChanging();
			entity.Book = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Borrow")]
	public partial class Borrow : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Borrow_ID;
		
		private string _Borrow_Book_ID;
		
		private System.DateTime _Borrow_Date;
		
		private System.DateTime _Borrow_Due_Date;
		
		private System.Nullable<System.DateTime> _Borrow_Return_Date;
		
		private int _Borrow_Fee;
		
		private EntitySet<Transaction> _Transactions;
		
		private EntityRef<Book> _Book;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBorrow_IDChanging(string value);
    partial void OnBorrow_IDChanged();
    partial void OnBorrow_Book_IDChanging(string value);
    partial void OnBorrow_Book_IDChanged();
    partial void OnBorrow_DateChanging(System.DateTime value);
    partial void OnBorrow_DateChanged();
    partial void OnBorrow_Due_DateChanging(System.DateTime value);
    partial void OnBorrow_Due_DateChanged();
    partial void OnBorrow_Return_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnBorrow_Return_DateChanged();
    partial void OnBorrow_FeeChanging(int value);
    partial void OnBorrow_FeeChanged();
    #endregion
		
		public Borrow()
		{
			this._Transactions = new EntitySet<Transaction>(new Action<Transaction>(this.attach_Transactions), new Action<Transaction>(this.detach_Transactions));
			this._Book = default(EntityRef<Book>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Borrow_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Borrow_ID
		{
			get
			{
				return this._Borrow_ID;
			}
			set
			{
				if ((this._Borrow_ID != value))
				{
					this.OnBorrow_IDChanging(value);
					this.SendPropertyChanging();
					this._Borrow_ID = value;
					this.SendPropertyChanged("Borrow_ID");
					this.OnBorrow_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Borrow_Book_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Borrow_Book_ID
		{
			get
			{
				return this._Borrow_Book_ID;
			}
			set
			{
				if ((this._Borrow_Book_ID != value))
				{
					if (this._Book.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBorrow_Book_IDChanging(value);
					this.SendPropertyChanging();
					this._Borrow_Book_ID = value;
					this.SendPropertyChanged("Borrow_Book_ID");
					this.OnBorrow_Book_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Borrow_Date", DbType="Date NOT NULL")]
		public System.DateTime Borrow_Date
		{
			get
			{
				return this._Borrow_Date;
			}
			set
			{
				if ((this._Borrow_Date != value))
				{
					this.OnBorrow_DateChanging(value);
					this.SendPropertyChanging();
					this._Borrow_Date = value;
					this.SendPropertyChanged("Borrow_Date");
					this.OnBorrow_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Borrow_Due_Date", DbType="Date NOT NULL")]
		public System.DateTime Borrow_Due_Date
		{
			get
			{
				return this._Borrow_Due_Date;
			}
			set
			{
				if ((this._Borrow_Due_Date != value))
				{
					this.OnBorrow_Due_DateChanging(value);
					this.SendPropertyChanging();
					this._Borrow_Due_Date = value;
					this.SendPropertyChanged("Borrow_Due_Date");
					this.OnBorrow_Due_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Borrow_Return_Date", DbType="Date")]
		public System.Nullable<System.DateTime> Borrow_Return_Date
		{
			get
			{
				return this._Borrow_Return_Date;
			}
			set
			{
				if ((this._Borrow_Return_Date != value))
				{
					this.OnBorrow_Return_DateChanging(value);
					this.SendPropertyChanging();
					this._Borrow_Return_Date = value;
					this.SendPropertyChanged("Borrow_Return_Date");
					this.OnBorrow_Return_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Borrow_Fee", DbType="Int NOT NULL")]
		public int Borrow_Fee
		{
			get
			{
				return this._Borrow_Fee;
			}
			set
			{
				if ((this._Borrow_Fee != value))
				{
					this.OnBorrow_FeeChanging(value);
					this.SendPropertyChanging();
					this._Borrow_Fee = value;
					this.SendPropertyChanged("Borrow_Fee");
					this.OnBorrow_FeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Borrow_Transaction", Storage="_Transactions", ThisKey="Borrow_ID", OtherKey="Transaction_Borrow_ID")]
		public EntitySet<Transaction> Transactions
		{
			get
			{
				return this._Transactions;
			}
			set
			{
				this._Transactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Book_Borrow", Storage="_Book", ThisKey="Borrow_Book_ID", OtherKey="Book_ID", IsForeignKey=true)]
		public Book Book
		{
			get
			{
				return this._Book.Entity;
			}
			set
			{
				Book previousValue = this._Book.Entity;
				if (((previousValue != value) 
							|| (this._Book.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Book.Entity = null;
						previousValue.Borrows.Remove(this);
					}
					this._Book.Entity = value;
					if ((value != null))
					{
						value.Borrows.Add(this);
						this._Borrow_Book_ID = value.Book_ID;
					}
					else
					{
						this._Borrow_Book_ID = default(string);
					}
					this.SendPropertyChanged("Book");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Borrow = this;
		}
		
		private void detach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Borrow = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Course")]
	public partial class Course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Course_ID;
		
		private string _Course_Desc;
		
		private EntitySet<Student> _Students;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCourse_IDChanging(string value);
    partial void OnCourse_IDChanged();
    partial void OnCourse_DescChanging(string value);
    partial void OnCourse_DescChanged();
    #endregion
		
		public Course()
		{
			this._Students = new EntitySet<Student>(new Action<Student>(this.attach_Students), new Action<Student>(this.detach_Students));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Course_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Course_ID
		{
			get
			{
				return this._Course_ID;
			}
			set
			{
				if ((this._Course_ID != value))
				{
					this.OnCourse_IDChanging(value);
					this.SendPropertyChanging();
					this._Course_ID = value;
					this.SendPropertyChanged("Course_ID");
					this.OnCourse_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Course_Desc", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Course_Desc
		{
			get
			{
				return this._Course_Desc;
			}
			set
			{
				if ((this._Course_Desc != value))
				{
					this.OnCourse_DescChanging(value);
					this.SendPropertyChanging();
					this._Course_Desc = value;
					this.SendPropertyChanged("Course_Desc");
					this.OnCourse_DescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Student", Storage="_Students", ThisKey="Course_ID", OtherKey="Student_Course_ID")]
		public EntitySet<Student> Students
		{
			get
			{
				return this._Students;
			}
			set
			{
				this._Students.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Roles")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Roles_ID;
		
		private string _Roles_Description;
		
		private EntitySet<Staff> _Staffs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoles_IDChanging(string value);
    partial void OnRoles_IDChanged();
    partial void OnRoles_DescriptionChanging(string value);
    partial void OnRoles_DescriptionChanged();
    #endregion
		
		public Role()
		{
			this._Staffs = new EntitySet<Staff>(new Action<Staff>(this.attach_Staffs), new Action<Staff>(this.detach_Staffs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Roles_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Roles_ID
		{
			get
			{
				return this._Roles_ID;
			}
			set
			{
				if ((this._Roles_ID != value))
				{
					this.OnRoles_IDChanging(value);
					this.SendPropertyChanging();
					this._Roles_ID = value;
					this.SendPropertyChanged("Roles_ID");
					this.OnRoles_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Roles_Description", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Roles_Description
		{
			get
			{
				return this._Roles_Description;
			}
			set
			{
				if ((this._Roles_Description != value))
				{
					this.OnRoles_DescriptionChanging(value);
					this.SendPropertyChanging();
					this._Roles_Description = value;
					this.SendPropertyChanged("Roles_Description");
					this.OnRoles_DescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_Staff", Storage="_Staffs", ThisKey="Roles_ID", OtherKey="Staff_Roles_ID")]
		public EntitySet<Staff> Staffs
		{
			get
			{
				return this._Staffs;
			}
			set
			{
				this._Staffs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Staff")]
	public partial class Staff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Staff_ID;
		
		private string _Staff_Surname;
		
		private string _Staff_FirstName;
		
		private string _Staff_Email;
		
		private string _Staff_Contact;
		
		private string _Staff_Password;
		
		private string _Staff_Roles_ID;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStaff_IDChanging(string value);
    partial void OnStaff_IDChanged();
    partial void OnStaff_SurnameChanging(string value);
    partial void OnStaff_SurnameChanged();
    partial void OnStaff_FirstNameChanging(string value);
    partial void OnStaff_FirstNameChanged();
    partial void OnStaff_EmailChanging(string value);
    partial void OnStaff_EmailChanged();
    partial void OnStaff_ContactChanging(string value);
    partial void OnStaff_ContactChanged();
    partial void OnStaff_PasswordChanging(string value);
    partial void OnStaff_PasswordChanged();
    partial void OnStaff_Roles_IDChanging(string value);
    partial void OnStaff_Roles_IDChanged();
    #endregion
		
		public Staff()
		{
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Staff_ID
		{
			get
			{
				return this._Staff_ID;
			}
			set
			{
				if ((this._Staff_ID != value))
				{
					this.OnStaff_IDChanging(value);
					this.SendPropertyChanging();
					this._Staff_ID = value;
					this.SendPropertyChanged("Staff_ID");
					this.OnStaff_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_Surname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Staff_Surname
		{
			get
			{
				return this._Staff_Surname;
			}
			set
			{
				if ((this._Staff_Surname != value))
				{
					this.OnStaff_SurnameChanging(value);
					this.SendPropertyChanging();
					this._Staff_Surname = value;
					this.SendPropertyChanged("Staff_Surname");
					this.OnStaff_SurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Staff_FirstName
		{
			get
			{
				return this._Staff_FirstName;
			}
			set
			{
				if ((this._Staff_FirstName != value))
				{
					this.OnStaff_FirstNameChanging(value);
					this.SendPropertyChanging();
					this._Staff_FirstName = value;
					this.SendPropertyChanged("Staff_FirstName");
					this.OnStaff_FirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Staff_Email
		{
			get
			{
				return this._Staff_Email;
			}
			set
			{
				if ((this._Staff_Email != value))
				{
					this.OnStaff_EmailChanging(value);
					this.SendPropertyChanging();
					this._Staff_Email = value;
					this.SendPropertyChanged("Staff_Email");
					this.OnStaff_EmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_Contact", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Staff_Contact
		{
			get
			{
				return this._Staff_Contact;
			}
			set
			{
				if ((this._Staff_Contact != value))
				{
					this.OnStaff_ContactChanging(value);
					this.SendPropertyChanging();
					this._Staff_Contact = value;
					this.SendPropertyChanged("Staff_Contact");
					this.OnStaff_ContactChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Staff_Password
		{
			get
			{
				return this._Staff_Password;
			}
			set
			{
				if ((this._Staff_Password != value))
				{
					this.OnStaff_PasswordChanging(value);
					this.SendPropertyChanging();
					this._Staff_Password = value;
					this.SendPropertyChanged("Staff_Password");
					this.OnStaff_PasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_Roles_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Staff_Roles_ID
		{
			get
			{
				return this._Staff_Roles_ID;
			}
			set
			{
				if ((this._Staff_Roles_ID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaff_Roles_IDChanging(value);
					this.SendPropertyChanging();
					this._Staff_Roles_ID = value;
					this.SendPropertyChanged("Staff_Roles_ID");
					this.OnStaff_Roles_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_Staff", Storage="_Role", ThisKey="Staff_Roles_ID", OtherKey="Roles_ID", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.Staffs.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.Staffs.Add(this);
						this._Staff_Roles_ID = value.Roles_ID;
					}
					else
					{
						this._Staff_Roles_ID = default(string);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Student")]
	public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Student_ID;
		
		private string _Student_Surname;
		
		private string _Student_FirstName;
		
		private string _Student_Course_ID;
		
		private string _Student_ContactNo;
		
		private string _Student_Email;
		
		private string _Student_Password;
		
		private EntitySet<Transaction> _Transactions;
		
		private EntitySet<Visit> _Visits;
		
		private EntityRef<Course> _Course;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudent_IDChanging(string value);
    partial void OnStudent_IDChanged();
    partial void OnStudent_SurnameChanging(string value);
    partial void OnStudent_SurnameChanged();
    partial void OnStudent_FirstNameChanging(string value);
    partial void OnStudent_FirstNameChanged();
    partial void OnStudent_Course_IDChanging(string value);
    partial void OnStudent_Course_IDChanged();
    partial void OnStudent_ContactNoChanging(string value);
    partial void OnStudent_ContactNoChanged();
    partial void OnStudent_EmailChanging(string value);
    partial void OnStudent_EmailChanged();
    partial void OnStudent_PasswordChanging(string value);
    partial void OnStudent_PasswordChanged();
    #endregion
		
		public Student()
		{
			this._Transactions = new EntitySet<Transaction>(new Action<Transaction>(this.attach_Transactions), new Action<Transaction>(this.detach_Transactions));
			this._Visits = new EntitySet<Visit>(new Action<Visit>(this.attach_Visits), new Action<Visit>(this.detach_Visits));
			this._Course = default(EntityRef<Course>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Student_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Student_ID
		{
			get
			{
				return this._Student_ID;
			}
			set
			{
				if ((this._Student_ID != value))
				{
					this.OnStudent_IDChanging(value);
					this.SendPropertyChanging();
					this._Student_ID = value;
					this.SendPropertyChanged("Student_ID");
					this.OnStudent_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Student_Surname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Student_Surname
		{
			get
			{
				return this._Student_Surname;
			}
			set
			{
				if ((this._Student_Surname != value))
				{
					this.OnStudent_SurnameChanging(value);
					this.SendPropertyChanging();
					this._Student_Surname = value;
					this.SendPropertyChanged("Student_Surname");
					this.OnStudent_SurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Student_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Student_FirstName
		{
			get
			{
				return this._Student_FirstName;
			}
			set
			{
				if ((this._Student_FirstName != value))
				{
					this.OnStudent_FirstNameChanging(value);
					this.SendPropertyChanging();
					this._Student_FirstName = value;
					this.SendPropertyChanged("Student_FirstName");
					this.OnStudent_FirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Student_Course_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Student_Course_ID
		{
			get
			{
				return this._Student_Course_ID;
			}
			set
			{
				if ((this._Student_Course_ID != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudent_Course_IDChanging(value);
					this.SendPropertyChanging();
					this._Student_Course_ID = value;
					this.SendPropertyChanged("Student_Course_ID");
					this.OnStudent_Course_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Student_ContactNo", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Student_ContactNo
		{
			get
			{
				return this._Student_ContactNo;
			}
			set
			{
				if ((this._Student_ContactNo != value))
				{
					this.OnStudent_ContactNoChanging(value);
					this.SendPropertyChanging();
					this._Student_ContactNo = value;
					this.SendPropertyChanged("Student_ContactNo");
					this.OnStudent_ContactNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Student_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Student_Email
		{
			get
			{
				return this._Student_Email;
			}
			set
			{
				if ((this._Student_Email != value))
				{
					this.OnStudent_EmailChanging(value);
					this.SendPropertyChanging();
					this._Student_Email = value;
					this.SendPropertyChanged("Student_Email");
					this.OnStudent_EmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Student_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Student_Password
		{
			get
			{
				return this._Student_Password;
			}
			set
			{
				if ((this._Student_Password != value))
				{
					this.OnStudent_PasswordChanging(value);
					this.SendPropertyChanging();
					this._Student_Password = value;
					this.SendPropertyChanged("Student_Password");
					this.OnStudent_PasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Transaction", Storage="_Transactions", ThisKey="Student_ID", OtherKey="Transaction_Student_ID")]
		public EntitySet<Transaction> Transactions
		{
			get
			{
				return this._Transactions;
			}
			set
			{
				this._Transactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Visit", Storage="_Visits", ThisKey="Student_ID", OtherKey="Visit_Student_ID")]
		public EntitySet<Visit> Visits
		{
			get
			{
				return this._Visits;
			}
			set
			{
				this._Visits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Student", Storage="_Course", ThisKey="Student_Course_ID", OtherKey="Course_ID", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.Students.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.Students.Add(this);
						this._Student_Course_ID = value.Course_ID;
					}
					else
					{
						this._Student_Course_ID = default(string);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
		
		private void attach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Transactions")]
	public partial class Transaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Transaction_ID;
		
		private string _Transaction_Student_ID;
		
		private string _Transaction_Borrow_ID;
		
		private string _Transaction_Staff_ID;
		
		private EntityRef<Borrow> _Borrow;
		
		private EntityRef<Student> _Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransaction_IDChanging(string value);
    partial void OnTransaction_IDChanged();
    partial void OnTransaction_Student_IDChanging(string value);
    partial void OnTransaction_Student_IDChanged();
    partial void OnTransaction_Borrow_IDChanging(string value);
    partial void OnTransaction_Borrow_IDChanged();
    partial void OnTransaction_Staff_IDChanging(string value);
    partial void OnTransaction_Staff_IDChanged();
    #endregion
		
		public Transaction()
		{
			this._Borrow = default(EntityRef<Borrow>);
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Transaction_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Transaction_ID
		{
			get
			{
				return this._Transaction_ID;
			}
			set
			{
				if ((this._Transaction_ID != value))
				{
					this.OnTransaction_IDChanging(value);
					this.SendPropertyChanging();
					this._Transaction_ID = value;
					this.SendPropertyChanged("Transaction_ID");
					this.OnTransaction_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Transaction_Student_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Transaction_Student_ID
		{
			get
			{
				return this._Transaction_Student_ID;
			}
			set
			{
				if ((this._Transaction_Student_ID != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransaction_Student_IDChanging(value);
					this.SendPropertyChanging();
					this._Transaction_Student_ID = value;
					this.SendPropertyChanged("Transaction_Student_ID");
					this.OnTransaction_Student_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Transaction_Borrow_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Transaction_Borrow_ID
		{
			get
			{
				return this._Transaction_Borrow_ID;
			}
			set
			{
				if ((this._Transaction_Borrow_ID != value))
				{
					if (this._Borrow.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransaction_Borrow_IDChanging(value);
					this.SendPropertyChanging();
					this._Transaction_Borrow_ID = value;
					this.SendPropertyChanged("Transaction_Borrow_ID");
					this.OnTransaction_Borrow_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Transaction_Staff_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Transaction_Staff_ID
		{
			get
			{
				return this._Transaction_Staff_ID;
			}
			set
			{
				if ((this._Transaction_Staff_ID != value))
				{
					this.OnTransaction_Staff_IDChanging(value);
					this.SendPropertyChanging();
					this._Transaction_Staff_ID = value;
					this.SendPropertyChanged("Transaction_Staff_ID");
					this.OnTransaction_Staff_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Borrow_Transaction", Storage="_Borrow", ThisKey="Transaction_Borrow_ID", OtherKey="Borrow_ID", IsForeignKey=true)]
		public Borrow Borrow
		{
			get
			{
				return this._Borrow.Entity;
			}
			set
			{
				Borrow previousValue = this._Borrow.Entity;
				if (((previousValue != value) 
							|| (this._Borrow.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Borrow.Entity = null;
						previousValue.Transactions.Remove(this);
					}
					this._Borrow.Entity = value;
					if ((value != null))
					{
						value.Transactions.Add(this);
						this._Transaction_Borrow_ID = value.Borrow_ID;
					}
					else
					{
						this._Transaction_Borrow_ID = default(string);
					}
					this.SendPropertyChanged("Borrow");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Transaction", Storage="_Student", ThisKey="Transaction_Student_ID", OtherKey="Student_ID", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.Transactions.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.Transactions.Add(this);
						this._Transaction_Student_ID = value.Student_ID;
					}
					else
					{
						this._Transaction_Student_ID = default(string);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Visit")]
	public partial class Visit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Visit_ID;
		
		private string _Visit_Student_ID;
		
		private System.DateTime _Visit_Date;
		
		private EntityRef<Student> _Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVisit_IDChanging(string value);
    partial void OnVisit_IDChanged();
    partial void OnVisit_Student_IDChanging(string value);
    partial void OnVisit_Student_IDChanged();
    partial void OnVisit_DateChanging(System.DateTime value);
    partial void OnVisit_DateChanged();
    #endregion
		
		public Visit()
		{
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Visit_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Visit_ID
		{
			get
			{
				return this._Visit_ID;
			}
			set
			{
				if ((this._Visit_ID != value))
				{
					this.OnVisit_IDChanging(value);
					this.SendPropertyChanging();
					this._Visit_ID = value;
					this.SendPropertyChanged("Visit_ID");
					this.OnVisit_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Visit_Student_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Visit_Student_ID
		{
			get
			{
				return this._Visit_Student_ID;
			}
			set
			{
				if ((this._Visit_Student_ID != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVisit_Student_IDChanging(value);
					this.SendPropertyChanging();
					this._Visit_Student_ID = value;
					this.SendPropertyChanged("Visit_Student_ID");
					this.OnVisit_Student_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Visit_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Visit_Date
		{
			get
			{
				return this._Visit_Date;
			}
			set
			{
				if ((this._Visit_Date != value))
				{
					this.OnVisit_DateChanging(value);
					this.SendPropertyChanging();
					this._Visit_Date = value;
					this.SendPropertyChanged("Visit_Date");
					this.OnVisit_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Visit", Storage="_Student", ThisKey="Visit_Student_ID", OtherKey="Student_ID", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.Visits.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.Visits.Add(this);
						this._Visit_Student_ID = value.Student_ID;
					}
					else
					{
						this._Visit_Student_ID = default(string);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class CountVisitsResult
	{
		
		private System.Nullable<int> _Total_Visits;
		
		public CountVisitsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total_Visits", DbType="Int")]
		public System.Nullable<int> Total_Visits
		{
			get
			{
				return this._Total_Visits;
			}
			set
			{
				if ((this._Total_Visits != value))
				{
					this._Total_Visits = value;
				}
			}
		}
	}
	
	public partial class MostBorrowedBooksResult
	{
		
		private string _Book_Name;
		
		private System.Nullable<int> _Total;
		
		public MostBorrowedBooksResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Book Name]", Storage="_Book_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Book_Name
		{
			get
			{
				return this._Book_Name;
			}
			set
			{
				if ((this._Book_Name != value))
				{
					this._Book_Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="Int")]
		public System.Nullable<int> Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this._Total = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
